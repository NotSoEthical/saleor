# This is a basic workflow to help you get started with Actions

name: paDevSecOps

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  DEP_PATH: /requirements.txt
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  
  # Auto_Code_Review:
  #   name: ACR-DevSkin
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - run: echo "Starting the Automated Code Review using DevSkin"
  #     - uses: microsoft/DevSkim-Action@v1
  #     - uses: github/codeql-action/upload-sarif@v1
  #       with:
  #        sarif_file: devskim-results.sarif
  #     - name: artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: DevSkim-artifact
  #         path: ${{ github.workspace }}  
  # SIS:
  #   name: Sensitive Information Scan (TruffleHog)
  #   runs-on: ubuntu-latest
  #   needs: Auto_Code_Review
  #   steps:
  #   - uses: actions/checkout@master
  #   - name: trufflehog-actions-scan
  #     uses: edplato/trufflehog-actions-scan@master
 
  # SCA:
  #   name: Source Composition Analysis (Safety)
  #   runs-on: ubuntu-latest
  #   needs:
  #     - SIS
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@master
  #     - name: Safety Check
  #       uses: aufdenpunkt/python-safety-check@master

 

  # SAST:
  #   name: Static Application Security Testing
  #   runs-on: ubuntu-latest
  #   needs:
  #    - SCA
  #   steps:
  #     - uses: AppThreat/sast-scan-action@master
  #       with:
  #         type: "python"

  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: reports
  #         path: reports
  # build:
  #   # The type of runner that the job will run on
  #   runs-on: ${{matrix.platforms}}
  #   needs:
  #     - SAST
  #   strategy:
  #     matrix:
  #       platforms: [ubuntu-latest]

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v2
  #       name: Check out code

  #     - uses: mr-smithers-excellent/docker-build-push@v5
  #       name: Build & push Docker image
  #       with:
  #         image: misterbert0ni/presta
  #         tags: v1, latest
  #         registry: docker.io
  #         dockerfile: Dockerfile
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}


 
#   SCA:
#     name: Source Composition Analysis (OWASP dependency check)
#     runs-on: ubuntu-latest
#     needs:
#       - SIS
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Depcheck
#         uses: dependency-check/Dependency-Check_Action@main
#         id: Depcheck
#         with:
#           project: 'test'
#           path: '.'
#           format: 'HTML'    
#           others: ''
#       - name: Upload Test results
#         uses: actions/upload-artifact@master
#         with:
#            name: Depcheck report
#            path: ${{github.workspace}}/reports
           
#   SCA2:
#     name: SCA Debricket
#     runs-on: ubuntu-latest
#     needs: SIS
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Using Debricket SAST solution
#         uses: debricked/actions/scan@v1
#         env:
#           USERNAME: '${{ secrets.DEBRICKED_USERNAME }}'
#           PASSWORD: '${{ secrets.DEBRICKED_PASSWORD }}'
  deploy_to_ecr:
    name: Deploy to AWS ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: padso
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

